class Solution {
public:
    double fb(vector<int> nums1, int i, vector<int> nums2, int j, int k){
        if(nums1.size() - i > nums2.size() - j){
            return fb(nums2, j, nums1, i, k);
        }
        if(nums1.size() - i == 0){
            return nums2[k - 1];
        }
        if(k == 1){
            return min(nums1[i], nums2[j]);
        }
        int tem = nums1.size();
        int p1 = i + min(tem, k / 2);
        int p2 = j + k - p1 + i;
        if(nums1[p1 - 1] < nums2[p2 - 1]){
            return fb(nums1, p1, nums2, j, k - p1 + i);
        }
        else if(nums1[p1 - 1] > nums2[p2 - 1]){
            return fb(nums1, i, nums2, p2, k - p2 + j);
        }
        else{
            return nums1[p1 - 1];
        }
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int k = nums1.size() + nums2.size();
        if(k % 2 == 1){
            return fb(nums1, 0, nums2, 0, k / 2 + 1);
        }
        else{
            return (fb(nums1, 0, nums2, 0, k / 2 + 1) + fb(nums1, 0, nums2, 0, k / 2)) / 2;
        }
    }
};
